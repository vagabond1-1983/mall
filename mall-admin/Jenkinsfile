def label = "slave-${UUID.randomUUID().toString()}"

def helmInit(String chartDir) {
  echo "download chart from github"
  git url: "https://github.com/vagabond1-1983/mall-helm.git"
  sh """
    ls -l
    cp -rf templates ${chartDir}
    cp -rf Chart.yaml ${chartDir}
    cp -rf values.yaml ${chartDir}
    helm lint ${chartDir}
    """
}

def helmDeploy(Map args) {
  helmInit(args.chartDir)
  if (args.dry_run) {
        println "Debug 应用"
        sh "helm upgrade --dry-run --debug --install ${args.name} ${args.chartDir} --set api.image.repository=${args.image} --set api.image.tag=${args.tag} --namespace=${args.namespace}"
    } else {
        println "部署应用"
        sh "helm upgrade --install ${args.name} ${args.chartDir} --set api.image.repository=${args.image} --set api.image.tag=${args.tag} --namespace=${args.namespace}"
        echo "应用 ${args.name} 部署成功. 可以使用 helm status ${args.name} 查看应用状态"
    }
}


podTemplate(label: label, containers: [
  containerTemplate(name: 'maven', image: 'maven:3.6-alpine', command: 'cat', ttyEnabled: true),
  containerTemplate(name: 'docker', image: 'docker', command: 'cat', ttyEnabled: true),
  containerTemplate(name: 'helm', image: 'alpine/helm:latest', command: 'cat', ttyEnabled: true)
], volumes: [
  hostPathVolume(mountPath: '/root/.m2', hostPath: '/var/run/m2'),
  hostPathVolume(mountPath: '/home/jenkins/.kube', hostPath: '/root/.kube'),
  hostPathVolume(mountPath: '/var/run/docker.sock', hostPath: '/var/run/docker.sock'),
  hostPathVolume(mountPath: '/jacoco', hostPath: '/data/k8s/jacoco')
],
  serviceAccount: 'jenkins2'
) {
  node(label) {
    def myRepo = checkout scm
    def gitCommit = myRepo.GIT_COMMIT
    def gitBranch = myRepo.GIT_BRANCH

    def imageTag = "1.0"
    def image = "mall-admin"

    stage('单元测试') {

        container('maven') {
          echo "1.测试阶段"
          sh '''
            mvn clean test -DDB_HOST=mysql
          '''
        }
    }
    stage('代码编译打包') {
      try {
        container('maven') {
          echo "2. 代码编译打包阶段"
          // refer: https://jenkins.io/doc/pipeline/steps/pipeline-utility-steps/#readmavenpom-read-a-maven-project-file
          imageTag = sh script: 'mvn help:evaluate -Dexpression=project.version -q -DforceStdout', returnStdout: true

          echo "image tag: ${imageTag}"

          sh """
            mvn clean package -Dmaven.test.skip=true
            """
        }
      } catch (exc) {
        println "构建失败 - ${currentBuild.fullDisplayName}"
        throw(exc)
      }
    }
    stage('查看 Docker 镜像') {
      container('docker') {
        echo "3. 查看maven插件打包出的 Docker 镜像阶段"
        sh """
          docker images | grep ${image}
          """
      }
    }
    stage('jacoco report') {
        jacoco()
    }

    try {
      stage('更新应用') {
        container('helm') {
          echo "4. [INFO] 开始 Helm 部署"
          helmDeploy(
              dry_run     : false,
              name        : "mall-admin",
              chartDir    : "mall-admin-chart",
              namespace   : "kube-ops",
              tag         : "${imageTag}",
              image       : "${image}",
          )
          echo "[INFO] Helm 部署应用成功..."
        }
      }
    } finally {
      stage('清理现场') {
        container('docker') {
          echo "删除镜像${image}:${imageTag}"
          sh """
            docker rmi -f ${image}:${imageTag}
          """
        }
      }
    }

  }
}
